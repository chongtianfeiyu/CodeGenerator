// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 10.0.0.0
//  
//     对此文件的更改可能会导致不正确的行为。此外，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeGenerator.Core
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    #line 1 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class MyBatis_SQLServer : T4Base
    {
        public override string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE mapper\r\n  PUBLIC \"-//mybatis.or" +
                    "g//DTD Mapper 3.0//EN\"\r\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mappe" +
                    "r namespace=\"");
            
            #line 10 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FullClassName));
            
            #line default
            #line hidden
            this.Write("Dao\">\r\n\t<update id=\"update\" parameterType=\"");
            
            #line 11 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.FullClassName));
            
            #line default
            #line hidden
            this.Write("\">\r\n\t\tUPDATE ");
            
            #line 12 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TableName));
            
            #line default
            #line hidden
            this.Write(" SET  \r\n\t\t");
            
            #line 13 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.DbColumnsWithoutPrimaryKey.Count;i++)
		{
			if(i==0) this.Write("{0}=source.{0}", DbColumnsWithoutPrimaryKey[i].ColumnName);
			else this.Write(",{0}=source.{0}", DbColumnsWithoutPrimaryKey[i].ColumnName);
		}
            
            #line default
            #line hidden
            this.Write(" WHERE ");
            
            #line 17 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.PrimaryKeys.Count;i++)
						{
							if(i==0) this.Write("{0}=#{{{0}}}",PrimaryKeys[i].ColumnName);
							else this.Write(",{0}=#{{{0}}}",PrimaryKeys[i].ColumnName);
						}
            
            #line default
            #line hidden
            this.Write("\t</update>\r\n\t<update id=\"batchUpdate\" parameterType=\"list\">\r\n\t\tMERGE ");
            
            #line 24 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TableName));
            
            #line default
            #line hidden
            this.Write(" AS target\r\n\t\tUSING \r\n\t\t(\r\n\t\t<foreach collection=\"list\" item=\"item\" index=\"index\"" +
                    " separator=\" UNION ALL \">\r\n\t\t\t\tSELECT ");
            
            #line 28 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.DbColumns.Count;i++)
						{
							if(i==0) this.Write("#{item."+DbColumns[i].ColumnName+"}");
							else this.Write(",#{item."+DbColumns[i].ColumnName+"}");
						}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t</foreach>\r\n\t\t) AS source (");
            
            #line 35 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.DbColumns.Count;i++)
						{
							if(i==0) this.Write(DbColumns[i].ColumnName);
							else this.Write(","+DbColumns[i].ColumnName);
						}
            
            #line default
            #line hidden
            this.Write(")\r\n\t\tON (");
            
            #line 40 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.PrimaryKeys.Count;i++)
						{
							if(i==0) this.Write("target.{0}=source.{0}",PrimaryKeys[i].ColumnName);
							else this.Write(",target.{0}=source.{0}",PrimaryKeys[i].ColumnName);
						}
            
            #line default
            #line hidden
            this.Write(")\r\n\t\tWHEN MATCHED THEN UPDATE SET ");
            
            #line 45 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.DbColumnsWithoutPrimaryKey.Count;i++)
						{
							if(i==0) this.Write("{0}=source.{0}", DbColumnsWithoutPrimaryKey[i].ColumnName);
							else this.Write(",{0}=source.{0}", DbColumnsWithoutPrimaryKey[i].ColumnName);
						}
            
            #line default
            #line hidden
            this.Write("\r\n\t\tWHEN NOT MATCHED THEN INSERT\r\n\t\t(");
            
            #line 52 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.DbColumnsWithoutIdentityKey.Count;i++)
						{
							if(i==0) this.Write(DbColumnsWithoutIdentityKey[i].ColumnName);
							else this.Write(","+DbColumnsWithoutIdentityKey[i].ColumnName);
						}
            
            #line default
            #line hidden
            this.Write(")\r\n\t\tVALUES (");
            
            #line 57 "D:\GitHub\CodeGenerator\CodeGenerator\Core\MyBatis_SQLServer.tt"
for(int i=0;i< this.DbColumnsWithoutIdentityKey.Count;i++)
						{
							if(i==0) this.Write("source."+DbColumnsWithoutIdentityKey[i].ColumnName);
							else this.Write(",source."+DbColumnsWithoutIdentityKey[i].ColumnName);
						}
            
            #line default
            #line hidden
            this.Write(");\r\n\t</update>\r\n</mapper>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
